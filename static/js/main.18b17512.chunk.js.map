{"version":3,"sources":["logo.svg","Idb.js","components/AppHeader.js","components/ProductsList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","AppHeader","classes","React","useState","auth","anchorEl","setAnchorEl","open","Boolean","handleClose","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","width","maxWidth","marginTop","display","marginLeft","backgroundColor","palette","background","paper","listitem","padding","borderWidth","borderStyle","borderColor","ProductsList","checked","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","List","dense","map","labelId","ListItem","key","button","ListItemAvatar","Avatar","alt","src","ListItemText","primary","ListItemSecondaryAction","Checkbox","onChange","inputProps","App","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18b17512.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3fb9c233.svg\";","import React, { Component } from 'react'\nimport loki from 'lokijs'\n\nclass Idb extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            products: []\n        }\n    }\n\n\n    componentDidMount() {\n        let db = new loki(\"xpire.db\", {\n            autoload: true,\n            autosave: true,\n            autosaveInterval: 4000\n        });\n\n        let products = db.addCollection('products');\n        products.insert({ name: 'Kartoffelpuffer', expireDate: \"30.05.2020\" });\n        //var odin = users.findOne({ name: 'Thor' });\n        console.log(\"Products: \" + products.toString());\n        console.log(db);\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Test</p>\n                <input></input>\n                <input></input>\n                <button>Submit</button>\n            </div>\n        )\n    }\n}\n\nexport default Idb\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function AppHeader() {\n    const classes = useStyles();\n    const [auth, setAuth] = React.useState(true);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleChange = (event) => {\n        setAuth(event.target.checked);\n    };\n\n    const handleMenu = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div className={classes.root}>\n\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Xpire\n          </Typography>\n                    {auth && (\n                        <div>\n                            <IconButton\n                                aria-label=\"account of current user\"\n                                aria-controls=\"menu-appbar\"\n                                aria-haspopup=\"true\"\n                                onClick={handleMenu}\n                                color=\"inherit\"\n                            >\n                                <AccountCircle />\n                            </IconButton>\n                            <Menu\n                                id=\"menu-appbar\"\n                                anchorEl={anchorEl}\n                                anchorOrigin={{\n                                    vertical: 'top',\n                                    horizontal: 'right',\n                                }}\n                                keepMounted\n                                transformOrigin={{\n                                    vertical: 'top',\n                                    horizontal: 'right',\n                                }}\n                                open={open}\n                                onClose={handleClose}\n                            >\n                                <MenuItem onClick={handleClose}>Profile</MenuItem>\n                                <MenuItem onClick={handleClose}>My account</MenuItem>\n                            </Menu>\n                        </div>\n                    )}\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: '90%',\n        marginTop: '1rem',\n        display: 'block',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        backgroundColor: theme.palette.background.paper,\n    },\n    listitem: {\n        padding: '1rem',\n        borderWidth: '0.2rem',\n        borderStyle: 'solid',\n        borderColor: 'colorPrimary'\n    }\n}));\n\n\nexport default function ProductsList() {\n    const classes = useStyles();\n    const [checked, setChecked] = React.useState([1]);\n\n    const handleToggle = (value) => () => {\n        const currentIndex = checked.indexOf(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n\n        setChecked(newChecked);\n    };\n\n    return (\n        <List dense className={classes.root}>\n            {[0, 1, 2, 3].map((value) => {\n                const labelId = `checkbox-list-secondary-label-${value}`;\n                return (\n                    <ListItem key={value} className={classes.listitem} button>\n                        <ListItemAvatar>\n                            <Avatar\n                                alt={`Avatar n°${value + 1}`}\n                                src={`/static/images/avatar/${value + 1}.jpg`}\n                            />\n                        </ListItemAvatar>\n                        <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\n                        <ListItemSecondaryAction>\n                            <Checkbox\n                                edge=\"end\"\n                                onChange={handleToggle(value)}\n                                checked={checked.indexOf(value) !== -1}\n                                inputProps={{ 'aria-labelledby': labelId }}\n                            />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Idb from './Idb'\nimport AppHeader from './components/AppHeader'\nimport ProductsList from './components/ProductsList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <ProductsList />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}